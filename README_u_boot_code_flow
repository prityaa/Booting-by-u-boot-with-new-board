
====================================================================
porting u-boot
====================================================================
1 . define SYS_VENDOR with new board name in arch/arm/machine_type/Kconfig

	edit "arch/arm/mach-bcm283x/Kconfig" with new board file
	name added in board file.

	e.g. =>
	config SYS_BOARD
	        default "rpi"

	config SYS_VENDOR
	        default "raspberrypi_new"

	config SYS_SOC
	        default "bcm283x"

	config SYS_CONFIG_NAME
	        default "rpi"

2 . Add board specific file in .board/
	board/raspberrypi/rpi

3 . add header file in include/configs/

	include/configs/rpi_new.h

4 . compile and fix other coding error if any.


====================================================================
Execution of the boot
====================================================================

1 . for "arch/arm/cpu/arm1176/start.S"
	1. save_boot_params calls from boards
	"board/_raspberrypi/rpi/lowlevel_init.S".

	2. start.S calls "lowlevel_init" from
	"board/_raspberrypi/rpi/lowlevel_init.S".

	3. start.S calls "_main" from
	"arch/arm/lib/crt0.S"

		1 . in _main,it calls board_init_f from
		common/board_f.c

		2 . in _main,it calls board_init_r from
		common/board_f.c

		whrer initcall_run_list uses "init_sequence_f"
		init_sequence_f => here only init list of
		function pointer is defined.

		2 . in _main,it calls board_init_r from
		"common/board_r.c".

		whrer initcall_run_list uses "init_sequence_r"
		init_sequence_r => here only init list of
		reset function pointer is defined.

		3 . here it calls main_loop => run_main_loop from

====================================================================
zed_board u-boot code flow (backward trace)
====================================================================
1 . main_loop calls autoboot_command and control goes to
	abortboot where it waits for bootdelay and boots default command.
	common/autoboot.c

2 . u-boot commmand line
	main_loop => common/main.c

3 . main_loop is called from
	run_main_loop => common/board_r.c

4 . initcall_run_list  => common/board_r.c
	init_sequence_r =

5 . initcall_run_list is called by
	board_init_r => common/board_r.c

6 . _main calls board_init_r in arch/arm/lib/crt0.S

6 . _main calls board_init_f in arch/arm/lib/crt0.S

7 . board_init_r is called from
	_main => arch/arm/lib/crt0.S

8 . _main is called from
	arch/arm/cpu/(PROCESSOR_TYPE)/Start.S

9 . _start calls _main as defined in arch/arm/mach-<>/u-boot.lds
	arch/arm/cpu/armv8/start.S


Board Initialisation Flow:
--------------------------

This is the intended start-up flow for boards. This should apply for both
SPL and U-Boot proper (i.e. they both follow the same rules).

Note: "SPL" stands for "Secondary Program Loader," which is explained in
more detail later in this file.

At present, SPL mostly uses a separate code path, but the function names
and roles of each function are the same. Some boards or architectures
may not conform to this.  At least most ARM boards which use
CONFIG_SPL_FRAMEWORK conform to this.

Execution typically starts with an architecture-specific (and possibly
CPU-specific) start.S file, such as:

        - arch/arm/cpu/armv7/start.S
        - arch/powerpc/cpu/mpc83xx/start.S
        - arch/mips/cpu/start.S

and so on. From there, three functions are called; the purpose and
limitations of each of these functions are described below.

lowlevel_init():
        - purpose: essential init to permit execution to reach board_init_f()
        - no global_data or BSS
        - there is no stack (ARMv7 may have one but it will soon be removed)
        - must not set up SDRAM or use console
        - must only do the bare minimum to allow execution to continue to
                board_init_f()
        - this is almost never needed
        - return normally from this function

board_init_f():
        - purpose: set up the machine ready for running board_init_r():
                i.e. SDRAM and serial UART
        - global_data is available
        - stack is in SRAM
        - BSS is not available, so you cannot use global/static variables,
                only stack variables and global_data

        Non-SPL-specific notes:
        - dram_init() is called to set up DRAM. If already done in SPL this
                can do nothing

        SPL-specific notes:
        - you can override the entire board_init_f() function with your own
                version as needed.
        - preloader_console_init() can be called here in extremis
        - should set up SDRAM, and anything needed to make the UART work
        - these is no need to clear BSS, it will be done by crt0.S
        - must return normally from this function (don't call board_init_r()
                directly)

Here the BSS is cleared. For SPL, if CONFIG_SPL_STACK_R is defined, then at
this point the stack and global_data are relocated to below
CONFIG_SPL_STACK_R_ADDR. For non-SPL, U-Boot is relocated to run at the top of
memory.

board_init_r():
        - purpose: main execution, common code
        - global_data is available
        - SDRAM is available
        - BSS is available, all static/global variables can be used
        - execution eventually continues to main_loop()

        Non-SPL-specific notes:
        - U-Boot is relocated to the top of memory and is now running from
                there.

        SPL-specific notes:
        - stack is optionally in SDRAM, if CONFIG_SPL_STACK_R is defined and
                CONFIG_SPL_STACK_R_ADDR points into SDRAM
        - preloader_console_init() can be called here - typically this is
                done by selecting CONFIG_SPL_BOARD_INIT and then supplying a
                spl_board_init() function containing this call
        - loads U-Boot or (in falcon mode) Linux


====================================================================
Read commnad line in kernel using Atags or DTB
====================================================================

1 . tags are read from ATAG_CMDLINE (hard coded) which was passed by u-boot at
	this location. and kernel reads tag->u.cmdline.cmdline
	from struct tag
	__tagtable(ATAG_CMDLINE, parse_tag_cmdline);
	in	=>arch/arm/kernel/atags_parse.c

		=>arch/arm/include/uapi/asm/setup.h:124:
		#define ATAG_CMDLINE	0x54410009

2 . 	parse_tag calls t->parse which is function
	callback for __tagtable
	in	=> arch/arm/kernel/atags_parse.c

3 .	parse_tags calls parse_tag
	in	=> arch/arm/kernel/atags_parse.c

4 . 	setup_machine_tags calls parse_tags
	in	=> arch/arm/kernel/atags_parse.c

5 . 	setup_arch calls setup_machine_tags when it finds
	bootargs in DTB is null.
	in	=> arch/arm/kernel/setup.c

6 . 	NOTE : __atags_pointer  is set from r2 register
	.long   processor_id                    @ r0
        .long   __machine_arch_type             @ r1
	.long   __atags_pointer                 @ r2

	in 	=> arch/arm/kernel/head-common.S

7 . 	start_kernel calls setup_arch(&command_line);
	in 	=> init/main.c

https://stackoverflow.com/questions/17661550/how-to-add-customised-atag-variable-in-u-boot-and-linux-kernel
